"""–ú–æ–¥—É–ª—å —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—é."""

import os
from typing import List, Optional


def binary_search_recursive(arr: List[int], target: int, 
                          left: int = 0, right: int = None) -> Optional[int]:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
    
    Args:
        arr: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        target: –ò—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
        left: –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞
        right: –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞
        
    Returns:
        –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        
    Time Complexity: O(log n)
    Space Complexity: O(log n) - –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
    """
    if right is None:  # O(1)
        right = len(arr) - 1  # O(1)
    
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π - —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    if left > right:  # O(1)
        return None  # O(1)
    
    mid = (left + right) // 2  # O(1)
    
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π - —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
    if arr[mid] == target:  # O(1)
        return mid  # O(1)
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —à–∞–≥ - –ø–æ–∏—Å–∫ –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
    if arr[mid] > target:  # O(1)
        return binary_search_recursive(arr, target, left, mid - 1)  # T(n/2)
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —à–∞–≥ - –ø–æ–∏—Å–∫ –≤ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
    return binary_search_recursive(arr, target, mid + 1, right)  # T(n/2)


def traverse_filesystem(path: str, level: int = 0) -> None:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤.
    
    Args:
        path: –ü—É—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ö–æ–¥–∞
        level: –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤)
        
    Time Complexity: O(n) –≥–¥–µ n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    Space Complexity: O(d) –≥–¥–µ d - –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    """
    try:
        # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π - –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(path):  # O(1)
            print(" " * level + "üö´ –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        items = os.listdir(path)  # O(k) –≥–¥–µ k - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        for item in items:  # O(k)
            item_path = os.path.join(path, item)  # O(1)
            
            if os.path.isdir(item_path):  # O(1)
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                print(" " * level + f"üìÅ {item}/")  # O(1)
                traverse_filesystem(item_path, level + 1)  # T(–ø–æ–¥–¥–µ—Ä–µ–≤–æ)
            else:
                # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π - —Ñ–∞–π–ª
                print(" " * level + f"üìÑ {item}")  # O(1)
                
    except PermissionError:
        print(" " * level + "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")


def hanoi_towers(n: int, source: str = "A", 
                auxiliary: str = "B", target: str = "C") -> None:
    """
    –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –•–∞–Ω–æ–π—Å–∫–∏—Ö –±–∞—à–µ–Ω –¥–ª—è n –¥–∏—Å–∫–æ–≤.
    
    Args:
        n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤
        source: –ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–µ—Ä–∂–µ–Ω—å
        auxiliary: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–µ—Ä–∂–µ–Ω—å
        target: –¶–µ–ª–µ–≤–æ–π —Å—Ç–µ—Ä–∂–µ–Ω—å
        
    Time Complexity: O(2^n)
    Space Complexity: O(n) - –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
    """
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π - –æ–¥–∏–Ω –¥–∏—Å–∫
    if n == 1:  # O(1)
        print(f"–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–∏—Å–∫ 1 —Å {source} –Ω–∞ {target}")  # O(1)
        return
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —à–∞–≥ 1: –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å n-1 –¥–∏—Å–∫–æ–≤ –Ω–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–µ—Ä–∂–µ–Ω—å
    hanoi_towers(n - 1, source, target, auxiliary)  # T(n-1)
    
    # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –¥–∏—Å–∫ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–µ—Ä–∂–µ–Ω—å
    print(f"–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–∏—Å–∫ {n} —Å {source} –Ω–∞ {target}")  # O(1)
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —à–∞–≥ 2: –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å n-1 –¥–∏—Å–∫–æ–≤ —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π
    hanoi_towers(n - 1, auxiliary, source, target)  # T(n-1)